// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to duifene_sign_c.h
class DuifeneSign {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DuifeneSign(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DuifeneSign.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  SessionHandle create_session() {
    return _create_session();
  }

  late final _create_sessionPtr =
      _lookup<ffi.NativeFunction<SessionHandle Function()>>('create_session');
  late final _create_session =
      _create_sessionPtr.asFunction<SessionHandle Function()>();

  void destroy_session(
    SessionHandle handle,
  ) {
    return _destroy_session(
      handle,
    );
  }

  late final _destroy_sessionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SessionHandle)>>(
          'destroy_session');
  late final _destroy_session =
      _destroy_sessionPtr.asFunction<void Function(SessionHandle)>();

  void session_login(
    SessionHandle handle,
    ffi.Pointer<ffi.Char> user_link,
  ) {
    return _session_login(
      handle,
      user_link,
    );
  }

  late final _session_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              SessionHandle, ffi.Pointer<ffi.Char>)>>('session_login');
  late final _session_login = _session_loginPtr
      .asFunction<void Function(SessionHandle, ffi.Pointer<ffi.Char>)>();

  int get_course_count(
    SessionHandle handle,
  ) {
    return _get_course_count(
      handle,
    );
  }

  late final _get_course_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(SessionHandle)>>(
          'get_course_count');
  late final _get_course_count =
      _get_course_countPtr.asFunction<int Function(SessionHandle)>();

  CourseInfo_C get_course_info(
    SessionHandle handle,
    int index,
  ) {
    return _get_course_info(
      handle,
      index,
    );
  }

  late final _get_course_infoPtr = _lookup<
          ffi.NativeFunction<CourseInfo_C Function(SessionHandle, ffi.Int)>>(
      'get_course_info');
  late final _get_course_info = _get_course_infoPtr
      .asFunction<CourseInfo_C Function(SessionHandle, int)>();

  SignInfo_C get_sign_info(
    SessionHandle handle,
    int index,
  ) {
    return _get_sign_info(
      handle,
      index,
    );
  }

  late final _get_sign_infoPtr =
      _lookup<ffi.NativeFunction<SignInfo_C Function(SessionHandle, ffi.Int)>>(
          'get_sign_info');
  late final _get_sign_info =
      _get_sign_infoPtr.asFunction<SignInfo_C Function(SessionHandle, int)>();

  void do_sign(
    SessionHandle handle,
    SignInfo_C sign_info,
  ) {
    return _do_sign(
      handle,
      sign_info,
    );
  }

  late final _do_signPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SessionHandle, SignInfo_C)>>(
          'do_sign');
  late final _do_sign =
      _do_signPtr.asFunction<void Function(SessionHandle, SignInfo_C)>();

  void free_sign_info(
    SignInfo_C sign_info,
  ) {
    return _free_sign_info(
      sign_info,
    );
  }

  late final _free_sign_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SignInfo_C)>>(
          'free_sign_info');
  late final _free_sign_info =
      _free_sign_infoPtr.asFunction<void Function(SignInfo_C)>();

  void free_course_info(
    CourseInfo_C course_info,
  ) {
    return _free_course_info(
      course_info,
    );
  }

  late final _free_course_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CourseInfo_C)>>(
          'free_course_info');
  late final _free_course_info =
      _free_course_infoPtr.asFunction<void Function(CourseInfo_C)>();
}

final class CourseInfo_C extends ffi.Struct {
  external ffi.Pointer<ffi.Char> course_id;

  external ffi.Pointer<ffi.Char> course_name;

  external ffi.Pointer<ffi.Char> class_id;
}

final class StudentAmount_C extends ffi.Struct {
  @ffi.Int()
  external int total_amount;

  @ffi.Int()
  external int signed_amount;
}

final class SignInfo_C extends ffi.Struct {
  external ffi.Pointer<ffi.Char> hf_seconds;

  external ffi.Pointer<ffi.Char> hf_checktype;

  external ffi.Pointer<ffi.Char> hf_check_in_id;

  external ffi.Pointer<ffi.Char> hf_class_id;

  external ffi.Pointer<ffi.Char> hf_check_code_key;

  external ffi.Pointer<ffi.Char> hf_room_longitude;

  external ffi.Pointer<ffi.Char> hf_room_latitude;

  external StudentAmount_C student_amount;
}

typedef SessionHandle = ffi.Pointer<ffi.Void>;
